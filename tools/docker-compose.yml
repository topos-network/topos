version: "3.3"
services:

  boot:
    container_name: boot
    command: boot node up --name test --home /tmp/node_config --no-edge-process
    image: ghcr.io/topos-protocol/topos:main
    init: true
    labels:
      "autoheal": "true"
      "prometheus-job": "boot"
    healthcheck:
      test: ./topos tce status --node http://localhost:1340
      interval: 15s
    volumes:
      - shared:/tmp/shared
      - ./node_config:/tmp/node_config
      - ./libp2p_keys.json:/tmp/shared/libp2p_keys.json
      - ./validator_bls_keys.json:/tmp/shared/validator_bls_keys.json
      - ./validator_keys.json:/tmp/shared/validator_keys.json
    build:
      context: ../
      args:
        - TOOLCHAIN_VERSION=stable
        - FEATURES=tce,network
    depends_on:
      autoheal:
        condition: service_started
    ports:
      - "9090"
      - "1340:1340"
      - "3000:3000"
      - "4000:4000"
    env_file:
      - env/base.env
      - env/node.env
      - env/telemetry.env
    environment:
      - TCE_LOCAL_KS=1 # 12D3KooWRhFCXBhmsMnur3up3vJsDoqWh4c39PKXgSWwzAzDHNLn
      - RUST_LOG=topos=debug,topos_tce_storage=info,topos_tce_synchronizer=info

  peer:
    image: ghcr.io/topos-protocol/topos:main
    command: peer node up --name test --home /tmp/node_config --no-edge-process
    init: true
    labels:
      "autoheal": "true"
    healthcheck:
      test: ./topos tce status --node http://localhost:1340
      interval: 5s
    volumes:
      - shared:/tmp/shared
      - ./node_config:/tmp/node_config
      - ./libp2p_keys.json:/tmp/shared/libp2p_keys.json
      - ./validator_bls_keys.json:/tmp/shared/validator_bls_keys.json
      - ./validator_keys.json:/tmp/shared/validator_keys.json
    build:
      context: ../
      args:
        - TOOLCHAIN_VERSION=stable
        - FEATURES=tce
    depends_on:
      autoheal:
        condition: service_started
      boot:
        condition: service_started
    ports:
      - "9090"
      - "1340"
      - "3000"
      - "4000"
    deploy:
      replicas: 2
    env_file:
      - env/base.env
      - env/node.env
      - env/telemetry.env
    environment:
      - RUST_LOG=topos=debug,topos_tce_storage=info,topos_tce_synchronizer=debug

  sync:
    image: ghcr.io/topos-protocol/topos:main
    command: sync node up --name test --home /tmp/node_config --no-edge-process
    init: true
    labels:
      "autoheal": "true"
    volumes:
      - shared:/tmp/shared
      - ./node_config:/tmp/node_config
      - ./libp2p_keys.json:/tmp/shared/libp2p_keys.json
      - ./validator_bls_keys.json:/tmp/shared/validator_bls_keys.json
      - ./validator_keys.json:/tmp/shared/validator_keys.json
    build:
      context: ../
      args:
        - TOOLCHAIN_VERSION=stable
        - FEATURES=tce
    depends_on:
      autoheal:
        condition: service_started
      boot:
        condition: service_started
    ports:
      - "9090"
      - "1340"
      - "3000"
      - "4000"
    env_file:
      - env/base.env
      - env/node.env
      - env/telemetry.env
    environment:
      - RUST_LOG=topos=debug


  spammer:
    container_name: spam
    command: network spam
    image: ghcr.io/topos-protocol/topos:main
    init: true
    build:
      context: ../
      args:
        - TOOLCHAIN_VERSION=stable
        - FEATURES=network
    volumes:
      - shared:/tmp/shared
    env_file:
      - env/base.env
      - env/telemetry.env
      - env/spammer.env
    depends_on:
      boot:
        condition: service_healthy
      peer:
        condition: service_healthy

  check:
    container_name: check
    image: ghcr.io/topos-protocol/topos:main
    command: tce push-certificate -f json
    profiles:
      - CI
      - check
    init: true
    volumes:
      - shared:/tmp/shared
    build:
      context: ../
      args:
        - TOOLCHAIN_VERSION=stable
        - GITHUB_TOKEN
        - FEATURES=tce
    depends_on:
      boot:
        condition: service_healthy
      peer:
        condition: service_healthy
    environment:
      - LOCAL_TEST_NET=true
      - RUST_LOG=info,topos=info
      - TARGET_NODES_PATH=/tmp/shared/peer_nodes.json

  autoheal:
    container_name: autoheal
    image: willfarrell/autoheal
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
    environment:
      - AUTOHEAL_INTERVAL=30
      - CURL_TIMEOUT=30

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - ./config/prometheus:/etc/prometheus
      - prom_data:/prometheus

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8080:8080
    restart: always
    deploy:
      mode: global

  grafana:
    image: grafana/grafana
    container_name: grafana
    depends_on:
      - prometheus
    ports:
      - 3030:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - ./config/grafana/provisioning/:/etc/grafana/provisioning/

volumes:
  shared:
  prom_data:
