version: "3.3"
services:

  # prometheus:
  #   image: prom/prometheus
  #   restart: always
  #   volumes:
  #     - ./prometheus:/etc/prometheus/
  #     - prometheus_data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/usr/share/prometheus/console_libraries'
  #     - '--web.console.templates=/usr/share/prometheus/consoles'
  #   ports:
  #     - 9090:9090
  #   links:
  #     - cadvisor:cadvisor
  #     - alertmanager:alertmanager
  #   depends_on:
  #     - cadvisor
  #
  # node-exporter:
  #   image: prom/node-exporter
  #   volumes:
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - /:/rootfs:ro
  #   command:
  #     - '--path.procfs=/host/proc'
  #     - '--path.sysfs=/host/sys'
  #     - --collector.filesystem.ignored-mount-points
  #     - '^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'
  #   ports:
  #     - 9100:9100
  #   restart: always
  #   deploy:
  #     mode: global
  #
  # alertmanager:
  #   image: prom/alertmanager
  #   restart: always
  #   ports:
  #     - 9093:9093
  #   volumes:
  #     - ./alertmanager/:/etc/alertmanager/
  #   command:
  #     - '--config.file=/etc/alertmanager/config.yml'
  #     - '--storage.path=/alertmanager'
  #
  # cadvisor:
  #   image: gcr.io/cadvisor/cadvisor
  #   volumes:
  #     - /:/rootfs:ro
  #     - /var/run:/var/run:rw
  #     - /sys:/sys:ro
  #     - /var/lib/docker/:/var/lib/docker:ro
  #   ports:
  #     - 8080:8080
  #   restart: always
  #   deploy:
  #     mode: global
  #
  # grafana:
  #   image: grafana/grafana
  #   user: '472'
  #   restart: always
  #   environment:
  #     GF_INSTALL_PLUGINS: 'grafana-clock-panel,grafana-simple-json-datasource'
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     - ./grafana/provisioning/:/etc/grafana/provisioning/
  #   env_file:
  #     - ./grafana/config.monitoring
  #   ports:
  #     - 3000:3000
  #   depends_on:
  #     - prometheus

  boot:
    container_name: boot
    command: boot tce run
    image: ghcr.io/topos-network/topos:main
    init: true
    labels:
      "autoheal": "true"
    healthcheck:
      test: ./topos tce push-peer-list --node http://localhost:1340 --format json /tmp/shared/peer_ids.json && ./topos tce status --node http://localhost:1340
      interval: 15s
    volumes:
      - shared:/tmp/shared
    build:
      context: ../
      args:
        - TOOLCHAIN_VERSION=stable
        - FEATURES=tce,network
    depends_on:
      autoheal:
        condition: service_started
    ports:
      - "9090"
      - "1340:1340"
    env_file:
      - env/base.env
      - env/node.env
      - env/telemetry.env
    environment:
      - TCE_LOCAL_KS=1 # 12D3KooWRhFCXBhmsMnur3up3vJsDoqWh4c39PKXgSWwzAzDHNLn

  peer:
    image: ghcr.io/topos-network/topos:main
    command: peer tce run
    init: true
    labels:
      "autoheal": "true"
    healthcheck:
      test: ./topos tce push-peer-list --node http://localhost:1340 --format json /tmp/shared/peer_ids.json && ./topos tce status --node http://localhost:1340
      interval: 5s
    volumes:
      - shared:/tmp/shared
    build:
      context: ../
      args:
        - TOOLCHAIN_VERSION=stable
        - FEATURES=tce
    depends_on:
      autoheal:
        condition: service_started
      boot:
        condition: service_started
    ports:
      - "9090"
      - "1340"
    deploy:
      replicas: 14
    env_file:
      - env/base.env
      - env/node.env
      - env/telemetry.env

  spammer:
    container_name: spam
    command: network spam
    image: ghcr.io/topos-network/topos:main
    init: true
    build:
      context: ../
      args:
        - TOOLCHAIN_VERSION=stable
        - FEATURES=network
    volumes:
      - shared:/tmp/shared
    env_file:
      - env/base.env
      - env/telemetry.env
      - env/spammer.env
    depends_on:
      boot:
        condition: service_healthy
      peer:
        condition: service_healthy

  check:
    container_name: check
    image: ghcr.io/topos-network/topos:main
    command: tce push-certificate -f json
    profiles:
      - CI
      - check
    init: true
    volumes:
      - shared:/tmp/shared
    build:
      context: ../
      args:
        - TOOLCHAIN_VERSION=stable
        - GITHUB_TOKEN
        - FEATURES=tce
    depends_on:
      boot:
        condition: service_healthy
      peer:
        condition: service_healthy
    environment:
      - LOCAL_TEST_NET=true
      - RUST_LOG=info,topos=debug
      - TARGET_NODES_PATH=/tmp/shared/peer_nodes.json

  autoheal:
    container_name: autoheal
    image: willfarrell/autoheal
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
    environment:
      - AUTOHEAL_INTERVAL=30
      - CURL_TIMEOUT=30

volumes:
  shared:
  prometheus_data: {}
  grafana_data: {}


networks:
  monitoring:
    driver: bridge


