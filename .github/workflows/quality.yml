name: Quality

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  audit:
    name: Audit - crate security vulnerabilities
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: ./.github/actions/install-rust
        with:
          with_cache: false
          tools: cargo-audit
          AWS_ACCESS_KEY_ID: ${{ secrets.ROBOT_AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.ROBOT_AWS_SECRET_ACCESS_KEY}}

      - name: Cargo audit
        run: cargo audit

  lint:
    name: Lint - Clippy
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      PRIV_GH_USER: ${{ secrets.ROBOT_TOPOSWARE_USER }}
      PRIV_GH_PACKAGE_TOKEN: ${{ secrets.ROBOT_TOPOSWARE_GH_PACKAGE_TOKEN }}
      TOPOS_SMART_CONTRACTS_IMAGE_NAME: topos-network/topos-smart-contracts
      TOPOS_SMART_CONTRACTS_IMAGE_TAG: main
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: ./.github/actions/install-rust
        with:
          components: clippy
          AWS_ACCESS_KEY_ID: ${{ secrets.ROBOT_AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.ROBOT_AWS_SECRET_ACCESS_KEY}}

      - name: Install Protoc
        uses: arduino/setup-protoc@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ env.PRIV_GH_USER }}
          password: ${{ env.PRIV_GH_PACKAGE_TOKEN }}

      - name: Pull images
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.TOPOS_SMART_CONTRACTS_IMAGE_NAME }}:${{ env.TOPOS_SMART_CONTRACTS_IMAGE_TAG }}

      - name: Acquire built smart contracts
        run: |
          mkdir -p artifacts/contracts/topos-core/TokenDeployer.sol  artifacts/contracts/topos-core/ToposCore.sol artifacts/contracts/topos-core/ToposCoreProxy.sol artifacts/contracts/topos-core/ToposMessaging.sol/
          mkdir -p artifacts/contracts/examples/ERC20Messaging.sol/ artifacts/contracts/interfaces/IERC20Messaging.sol/ artifacts/contracts/interfaces/IToposCore.sol artifacts/contracts/interfaces/IToposMessaging.sol/ 
          docker create --name dummy ${{ env.REGISTRY }}/${{ env.TOPOS_SMART_CONTRACTS_IMAGE_NAME }}:${{ env.TOPOS_SMART_CONTRACTS_IMAGE_TAG }}
          docker cp dummy:/usr/src/app/artifacts/contracts/topos-core/TokenDeployer.sol/TokenDeployer.json ./artifacts/contracts/topos-core/TokenDeployer.sol/
          docker cp dummy:/usr/src/app/artifacts/contracts/topos-core/ToposCore.sol/ToposCore.json ./artifacts/contracts/topos-core/ToposCore.sol/
          docker cp dummy:/usr/src/app/artifacts/contracts/topos-core/ToposCoreProxy.sol/ToposCoreProxy.json ./artifacts/contracts/topos-core/ToposCoreProxy.sol/
          docker cp dummy:/usr/src/app/artifacts/contracts/topos-core/ToposMessaging.sol/ToposMessaging.json ./artifacts/contracts/topos-core/ToposMessaging.sol/
          docker cp dummy:/usr/src/app/artifacts/contracts/examples/ERC20Messaging.sol/ERC20Messaging.json ./artifacts/contracts/examples/ERC20Messaging.sol/
          docker cp dummy:/usr/src/app/artifacts/contracts/interfaces/IToposCore.sol/IToposCore.json ./artifacts/contracts/interfaces/IToposCore.sol/
          docker cp dummy:/usr/src/app/artifacts/contracts/interfaces/IToposMessaging.sol/IToposMessaging.json ./artifacts/contracts/interfaces/IToposMessaging.sol/
          docker cp dummy:/usr/src/app/artifacts/contracts/interfaces/IERC20Messaging.sol/IERC20Messaging.json ./artifacts/contracts/interfaces/IERC20Messaging.sol/
          docker rm -f dummy          

      - name: Cargo xclippy
        run: cargo xclippy

  fmt:
    name: Check - Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: ./.github/actions/install-rust
        with:
          with_cache: false
          components: rustfmt
          AWS_ACCESS_KEY_ID: ${{ secrets.ROBOT_AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.ROBOT_AWS_SECRET_ACCESS_KEY}}

      - name: Cargo fmt
        run: cargo fmt --all -- --check

  msrv:
    name: Check - MSRV
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: ./.github/actions/install-rust
        with:
          msrv: true
          AWS_ACCESS_KEY_ID: ${{ secrets.ROBOT_AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.ROBOT_AWS_SECRET_ACCESS_KEY}}

      - name: Cargo check
        run: cargo check --workspace --all-features --locked
